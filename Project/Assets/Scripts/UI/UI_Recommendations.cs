using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using MyCustomizedEditor.Common.Util;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class UI_Recommendations : UI_PopUp
{
    private readonly List<List<XmlManager.SceneData>> _sceneData = new();
    private readonly List<GameObject[]> pageButtonsList = new();
    private UI_Master _master;


    private enum Btns
    {
        RecommendationA,
        RecommendationB,
        RecommendationC,
        RecommendationD,
        Max
    }
    public override bool InitOnLoad()
    {
        BindButton(typeof(Btns));

        FilterRandomRecommendations(); // 1. Ï∂îÏ≤ú ÏΩòÌÖêÏ∏† Î®ºÏ†Ä Ï§ÄÎπÑ
        InitPageNavigation();          // 2. Î≤ÑÌäºÏóê Î∞îÏù∏Îî©

        Logger.CoreClassLog("Ï∂îÏ≤ú UI Ï¥àÍ∏∞Ìôî ÏôÑÎ£å-----------------------");
        return true;
    }
    public void InitPageNavigation()
    {
        if (_sceneData.Count == 0 || _sceneData[0].Count < 4)
        {
            Debug.LogWarning("Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.");
            return;
        }

        BindSceneDataToButton(GetButton((int)Btns.RecommendationA).gameObject, _sceneData[0][0]);
        BindSceneDataToButton(GetButton((int)Btns.RecommendationB).gameObject, _sceneData[0][1]);
        BindSceneDataToButton(GetButton((int)Btns.RecommendationC).gameObject, _sceneData[0][2]);
        BindSceneDataToButton(GetButton((int)Btns.RecommendationD).gameObject, _sceneData[0][3]);
    }
    
    
    public void FilterRandomRecommendations()
    {
        var allScenes = XmlManager.Instance.SceneSettings.Values
            .Where(x => x.IsActive)
            .ToList();

        if (allScenes.Count < 4)
        {
            Debug.LogWarning("Ï∂îÏ≤úÌï† ÏΩòÌÖêÏ∏†Í∞Ä 4Í∞ú ÎØ∏ÎßåÏûÖÎãàÎã§.");
            return;
        }

        var randomFour = allScenes.OrderBy(x => Random.value).Take(4).ToList();

        _sceneData.Clear();
        _sceneData.Add(randomFour);
    }
    private void BindSceneDataToButton(GameObject buttonObj, XmlManager.SceneData data)
    {
        buttonObj.SetActive(true);

        GetThumbnailImage(buttonObj, data);

        // ÌÖçÏä§Ìä∏ ÏÑ§Ï†ï
        var textObj = buttonObj.transform.GetChild(2);
        if (textObj != null)
        {
            var text = textObj.GetComponent<Text>();
            text.text = !string.IsNullOrEmpty(data.Title) ? data.Title : data.Id;
        }

        // ÏûêÎ¨ºÏá†
        var lockFrame = buttonObj.transform.Find("LockFrame");
        if (lockFrame != null)
            lockFrame.gameObject.SetActive(!data.IsActive);

        // ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
        var btn = buttonObj.GetComponent<Button>();
        if (btn != null)
        {
            btn.interactable = data.IsActive;
            btn.onClick.RemoveAllListeners();

            if (data.IsActive)
            {
                var btnImageController = Utils.GetOrAddComponent<CursorImageController>(buttonObj);
                btnImageController.DefaultScale = buttonObj.transform.localScale;

                string sceneId = data.Id;
                btn.onClick.AddListener(() =>
                {
                    SceneManager.LoadSceneAsync(sceneId);
                });
            }
        }
    }

    private void ApplySceneDataToPage(int pageIndex, List<XmlManager.SceneData> sceneList)
    {
        var buttonObjs = pageButtonsList[pageIndex];

        for (int i = 0; i < buttonObjs.Length; i++)
        {
            var buttonObj = buttonObjs[i];

            if (i >= sceneList.Count)
            {
                buttonObj.SetActive(false);
                continue;
            }

            var data = sceneList[i];
            buttonObj.SetActive(true);

            GetThumbnailImage(buttonObj, data);

            // ÌÖçÏä§Ìä∏ ÏÑ§Ï†ï
            var textObj = buttonObj.transform.GetChild(2);
            if (textObj != null)
            {
                var text = textObj.GetComponent<Text>();
                text.text = !string.IsNullOrEmpty(data.Title) ? data.Title : data.Id;
            }

            // ÏûêÎ¨ºÏá†
            var lockFrame = buttonObj.transform.Find("LockFrame");
            if (lockFrame != null)
                lockFrame.gameObject.SetActive(!data.IsActive);

            // ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
            var btn = buttonObj.GetComponent<Button>();
            if (btn != null)
            {
                btn.interactable = data.IsActive;
                btn.onClick.RemoveAllListeners();

                if (data.IsActive)
                {
                    var btnImageController = Utils.GetOrAddComponent<CursorImageController>(buttonObj);
                    btnImageController.DefaultScale = buttonObj.transform.localScale;

                    string sceneId = data.Id;
                    btn.onClick.AddListener(() =>
                    {
                        if (_master == null)
                            _master = Managers.UI.SceneUI.GetComponent<UI_Master>();

                        _master.OnSceneBtnClicked(sceneId, data.Title);
                    });
                }
            }
        }
    }

    public void GetThumbnailImage(GameObject obj, XmlManager.SceneData data)
    {
        // üõ†Ô∏è ÏßÄÏó≠ Î≥ÄÏàòÏóê Ï∞∏Ï°∞Î•º Í≥†Ï†ïÌï¥ÏÑú ÌÅ¥Î°úÏ†Ä Ïù¥Ïäà Î∞©ÏßÄ
        var objRef = obj;
        var dataRef = data;

        StartCoroutine(LoadThumbnailImage(objRef, dataRef));
    }

    public IEnumerator LoadThumbnailImage(GameObject obj, XmlManager.SceneData sceneData)
    {
        var dataRef = sceneData;
        var objRef = obj;
        string sceneId = dataRef.Id;


        // ‚úÖ 1. Ï∫êÏãúÏóê SpriteÍ∞Ä ÏûàÎäîÏßÄ Î®ºÏ†Ä ÌôïÏù∏
        if (Managers.Resource.ThumbnailCache.TryGetValue(sceneId, out var cachedSprite))
        {
            ApplyThumbnail(objRef, cachedSprite);
            yield break;
        }

        // ‚úÖ 2. Í≤ΩÎ°ú Íµ¨ÏÑ±
        string thumbnailImagePath = Path.Combine(Application.streamingAssetsPath, $"Thumbnail_Image/{sceneId}.png");
        string thumbnailUri = "file://" + thumbnailImagePath;

        // ‚úÖ 3. Ïõπ ÏöîÏ≤≠ (Î°úÏª¨ÏóêÏÑú Î°úÎî©)
        using (var uwrThumb = UnityWebRequestTexture.GetTexture(thumbnailUri))
        {
            yield return uwrThumb.SendWebRequest();

            if (uwrThumb.result != UnityWebRequest.Result.Success)
                Logger.CoreClassLog($"‚ùå Ïç∏ÎÑ§Ïùº Î°úÎî© Ïã§Ìå®: {sceneId} - {uwrThumb.error}");
            else
            {
                var texture = DownloadHandlerTexture.GetContent(uwrThumb);

                var sprite = Sprite.Create(texture,
                    new Rect(0, 0, texture.width, texture.height),
                    new Vector2(0.5f, 0.5f),
                    100f); // Optional: pixelsPerUnit ÏÑ§Ï†ï

                // ‚úÖ 4. Ï∫êÏãúÏóê Ï†ÄÏû•
                Managers.Resource.ThumbnailCache[sceneId] = sprite;

                // ‚úÖ 5. Ï†ÅÏö©
                ApplyThumbnail(objRef, sprite);
            }
        }
    }


    private void ApplyThumbnail(GameObject obj, Sprite sprite)
    {
        var mask = obj.transform.Find("PictureFrmae_(Mask)");
        if (mask != null && mask.childCount > 0)
        {
            var img = mask.GetChild(0).GetComponent<Image>();
            if (img != null)
                img.sprite = sprite;
        }
    }
}